select * from customer;
-- Using WHERE clause with the equal (=) operator example
select *,first_name,last_name from customer where first_name = 'Linda';
-- 2) Using WHERE clause with the AND operator example
select * from customer;
select *,email,first_name,last_name from customer where first_name = 'Marcy' and last_name = 'Smith';
-- 3) Using WHERE clause with the OR operator example
select *,email,first_name,last_name from customer where first_name = 'Marcy' or last_name = 'hmith';
-- 4) Using WHERE clause with the IN operator example
select * from customer;
select *,first_name,last_name from customer where first_name in ('Mary','Linda','Maria');
-- 5) Using WHERE clause with the LIKE operator example
select * from customer;
select *,first_name from customer where first_name  like 'Ma%';
select * from customer;
select *,first_name from customer where first_name like '%ma';
select *,first_name from customer where first_name like '%ma%';
-- 6) Using WHERE clause with the BETWEEN operator example
select * from customer;
select length(first_name) as fname from customer 
where first_name like 'A%' and length(first_name) between 3 and 5
order by fname;

select * from customer;
select * from payment;
select customer_id from payment where customer_id between 343 and 344;

-- 7) Using WHERE clause with the not equal operator (<>) (!=) example

-- PostgreSQL LIMIT:  get a subset of rows generated by a query.
select * from film;
select *,film_id,title,description from film order by film_id limit 5;
select *,film_id,title,description from film order by film_id limit 5 offset 10;
-- PostgreSQL FETCH
select *,film_id,title,description from film order by film_id fetch first 5 row only;
-- PostgreSQL Alias: A PostgreSQL alias assigns a table or a column a temporary name in a query.
-- The aliases only exist during the execution of the query.
select * from customer;
select last_name as lname from customer;
select * from customer;
select first_name ||' '|| last_name as full_name from customer order by full_name;
select first_name,last_name,email from customer as customer_table;
select * from film_category;
select fc.last_update from film_category as fc;

-- PostgreSQL Joins: PostgreSQL join is used to combine columns from one (self-join) or more tables based on the values of the common columns between the tables. The common columns are typically the primary key columns of the first table and foreign key columns of the second table.

select * from basket_a,basket_b;
select a.id id_a,b.id id_b,a.fruit fruit_a,b.fruit fruit_b 
from basket_a a 
inner join basket_b b on b.fruit=a.fruit;
select a.id id_a,b.id id_b,a.fruit fruit_a,b.fruit fruit_b 
from basket_a a 
left join basket_b b on a.fruit=b.fruit;
select a.id id_a,b.id id_b,a.fruit fruit_a,b.fruit fruit_b 
from basket_a a 
right join basket_b b on b.fruit=a.fruit
where a.id is null;

select a.id id_a,b.id id_b,a.fruit fruit_a,b.fruit fruit_b 
from basket_a a 
full outer join basket_b b on b.fruit=a.fruit;
select a.id id_a,b.id id_b,a.fruit fruit_a,b.fruit fruit_b 
from basket_a a 
full join basket_b b on b.fruit=a.fruit;

-- Introduction to PostgreSQL INNER JOIN clause: 2 tables join
select * from customer;
select customer.customer_id,first_name,last_name,email,amount,payment_date 
from customer
inner join payment on payment.customer_id = customer.customer_id;
-- You can add the ORDER BY clause to sort the result set by customer id as follows:
select customer.customer_id,first_name,last_name,email,amount,payment_date 
from customer
inner join payment on payment.customer_id = customer.customer_id 
order by customer.customer_id;
-- You can also use a WHERE clause to filter customer. 
select customer.customer_id,first_name,last_name,email,amount,payment_date 
from customer
inner join payment on payment.customer_id = customer.customer_id 
where customer.customer_id = 3;

-- PostgreSQL INNER JOIN to join 3 tables example
-- PostgreSQL INNER JOIN to join 3 tables example
select * from customer;
select customer.customer_id ,
customer.first_name customer_fname,
customer.last_name customer_lname,
customer.email,
staff.first_name staff_fname,
staff.last_name staff_lname,
amount,
payment_date
from customer
inner join payment on payment.customer_id = customer.customer_id
inner join staff on payment.staff_id = staff.staff_id;

-- PostgreSQL LEFT JOIN: 
select film.film_id,film.title,inventory_id from film
left join inventory on inventory.film_id = film.film_id
order by film.film_id;
select film.film_id,film.title,inventory_id from film
left join inventory on inventory.film_id = film.film_id
where inventory.film_id is null order by film.title;
-- PostgreSQL Self-Join:A self-join is a query in which a table is joined to itself. Self-joins are useful for comparing values in a column of rows within the same table.

-- cross join:
select * from basket_a cross join basket_b;
-- group by: 
select * from customer;
select first_name from customer group by first_name order by first_name asc;
select distinct(customer_id) from payment group by customer_id;
select customer_id,sum(amount) from payment group by customer_id;
select * from payment;
select count(payment_id),sum(amount) from payment group by payment_id;
--  PostgreSQL HAVING: having use for condtion. having is use olny for group by clause.
select customer_id,sum(amount) from payment
group by customer_id
having sum(amount) > 200;
--sql set operators:
-- PostgreSQL UNION:  to combine result sets of multiple queries into a single result. same name colum add only.
select first_name,last_name from customer
union
select first_name,last_name from actor;


